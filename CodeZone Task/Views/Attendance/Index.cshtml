@model IEnumerable<CodeZone.DAL.Entities.Attendance>

@{
    ViewData["Title"] = "Attendance Records";
}

@Html.AntiForgeryToken()

<div id="statusUpdateAlert" class="alert alert-info alert-dismissible fade show" role="alert" style="display: none;">
    <span id="statusUpdateMessage"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<div class="row">
    <!-- Main Content -->
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Attendance Records</h1>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#quickAttendanceModal">
                <i class="fas fa-plus"></i> Quick Attendance Entry
            </button>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">Filter Records</h5>
            </div>
            <div class="card-body">
                <form method="get" class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Department</label>
                        <select name="deptId" class="form-select">
                            <option value="">All Departments</option>
                            @foreach (var dept in ViewBag.Departments)
                            {
                                var isSelected = (ViewBag.SelectedDeptId?.ToString() == dept.DepartmentId.ToString());
                                <option value="@dept.DepartmentId" selected="@(isSelected ? "selected" : null)">
                                    @dept.Name
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Employee</label>
                        <select name="empId" class="form-select">
                            <option value="">All Employees</option>
                            @foreach (var emp in ViewBag.Employees)
                            {
                                var isSelected = ViewBag.SelectedEmpId?.ToString() == emp.Id.ToString();
                                <option value="@emp.Id" selected="@(isSelected ? "selected" : null)">
                                    @emp.FullName (@emp.DepartmentName)
                                </option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">From Date</label>
                        <input type="date" name="from" class="form-control" value="@ViewBag.FromDate?.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">To Date</label>
                        <input type="date" name="to" class="form-control" value="@ViewBag.ToDate?.ToString("yyyy-MM-dd")" />
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">Filter</button>
                        <a asp-action="Index" class="btn btn-secondary">Clear</a>
                        <a asp-action="Create" class="btn btn-success">Create New</a>
                    </div>
                </form>
                
                <!-- Live Search Row -->
                <hr class="my-3">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="liveSearch" class="form-label">
                            <i class="fas fa-search"></i> Live Search
                        </label>
                        <input type="text" id="liveSearch" class="form-control" placeholder="Search by employee name, department, date, or status...">
                    </div>
                    <div class="col-md-6 d-flex align-items-end">
                        <button type="button" id="clearLiveFilters" class="btn btn-outline-secondary btn-sm">
                            Clear Live Filters
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <table class="table table-striped" id="attendanceTable">
            <thead>
                <tr>
                    <th>Attendance ID</th>
                    <th>Employee</th>
                    <th>Department</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr data-attendance-id="@item.AttendanceId">
                        <td>@item.AttendanceId</td>
                        <td>@item.Employee?.FullName (@item.Employee?.EmployeeCode)</td>
                        <td>@item.Employee?.Department?.Name</td>
                        <td>@item.Date.ToString("MMM dd, yyyy")</td>
                        <td>
                            <div class="status-cell">
                                <span class="status-badge badge @(item.Status == CodeZone.DAL.Entities.Enum.AttendanceStatus.Present ? "bg-success" : "bg-danger")">
                                    @item.Status
                                </span>
                                <select class="status-dropdown form-select form-select-sm" style="display: none; width: auto;">
                                    @if (item.Status == CodeZone.DAL.Entities.Enum.AttendanceStatus.Present)
                                    {
                                        <option value="Present" selected>Present</option>
                                        <option value="Absent">Absent</option>
                                    }
                                    else
                                    {
                                        <option value="Present">Present</option>
                                        <option value="Absent" selected>Absent</option>
                                    }
                                </select>
                                <button class="edit-status-btn btn btn-sm btn-outline-primary ms-1">Edit</button>
                                <button class="save-status-btn btn btn-sm btn-success ms-1" style="display: none;">Save</button>
                                <button class="cancel-status-btn btn btn-sm btn-secondary ms-1" style="display: none;">Cancel</button>
                            </div>
                        </td>
                        <td>
                            <a asp-action="Details" asp-route-id="@item.AttendanceId" class="btn btn-info btn-sm">Details</a>
                            <a asp-action="Edit" asp-route-id="@item.AttendanceId" class="btn btn-warning btn-sm">Edit</a>
                            <button type="button" class="btn btn-danger btn-sm delete-attendance" data-id="@item.AttendanceId">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (!Model.Any())
        {
            <div class="alert alert-info">
                No attendance records found matching the selected criteria.
            </div>
        }

        @{
            var paginationData = ViewBag.PaginationData as CodeZone.BLL.DTOs.PaginationDto<CodeZone.DAL.Entities.Attendance>;
            var totalItems = paginationData?.TotalItems ?? Model.Count();
            var pageSize = paginationData?.PageSize ?? 4;
            var currentPage = paginationData?.CurrentPage ?? 1;
            var totalPages = paginationData?.TotalPages ?? 1;
            var startPage = paginationData?.StartPage ?? 1;
            var endPage = paginationData?.EndPage ?? 1;
            var hasPreviousPage = paginationData?.HasPreviousPage ?? false;
            var hasNextPage = paginationData?.HasNextPage ?? false;
        }

        @if (totalPages > 1)
        {
            <nav aria-label="Attendance pagination">
                <ul class="pagination justify-content-center">
                    @if (hasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" 
                               asp-route-deptId="@ViewBag.SelectedDeptId" 
                               asp-route-empId="@ViewBag.SelectedEmpId" 
                               asp-route-from="@ViewBag.FromDate?.ToString("yyyy-MM-dd")" 
                               asp-route-to="@ViewBag.ToDate?.ToString("yyyy-MM-dd")" 
                               asp-route-page="@(currentPage - 1)" 
                               asp-route-pageSize="@pageSize">Previous</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link">Previous</span>
                        </li>
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == currentPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" asp-action="Index" 
                                   asp-route-deptId="@ViewBag.SelectedDeptId" 
                                   asp-route-empId="@ViewBag.SelectedEmpId" 
                                   asp-route-from="@ViewBag.FromDate?.ToString("yyyy-MM-dd")" 
                                   asp-route-to="@ViewBag.ToDate?.ToString("yyyy-MM-dd")" 
                                   asp-route-page="@i" 
                                   asp-route-pageSize="@pageSize">@i</a>
                            </li>
                        }
                    }

                    @if (hasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" 
                               asp-route-deptId="@ViewBag.SelectedDeptId" 
                               asp-route-empId="@ViewBag.SelectedEmpId" 
                               asp-route-from="@ViewBag.FromDate?.ToString("yyyy-MM-dd")" 
                               asp-route-to="@ViewBag.ToDate?.ToString("yyyy-MM-dd")" 
                               asp-route-page="@(currentPage + 1)" 
                               asp-route-pageSize="@pageSize">Next</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <span class="page-link">Next</span>
                        </li>
                    }
                </ul>
            </nav>
            
            <div class="text-center text-muted">
                <small>Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalItems) of @totalItems items</small>
            </div>
        }
    </div>
    </div>

<!-- Quick Attendance Entry Modal -->
<div class="modal fade" id="quickAttendanceModal" tabindex="-1" aria-labelledby="quickAttendanceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="quickAttendanceModalLabel">Quick Attendance Entry</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Select Employee:</label>
                    <select id="calendarEmployeeSelect" class="form-select">
                        <option value="">Choose an employee...</option>
                        @foreach (var emp in ViewBag.Employees)
                        {
                            <option value="@emp.Id" data-code="@emp.EmployeeCode" data-name="@emp.FullName" data-dept="@emp.DepartmentName">
                                @emp.FullName (@emp.DepartmentName)
                            </option>
                        }
                    </select>
                </div>
                
                        <div class="mb-3">
                            <label class="form-label">Selected Date:</label>
                            <div id="selectedDateDisplay" class="alert alert-info">
                                <strong>Date:</strong> <span id="selectedDateText">No date selected</span>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Status:</label>
                            <div id="currentStatusDisplay" class="alert alert-light">
                                <strong>Status:</strong> <span id="currentStatusText">Not marked</span>
                            </div>
                        </div>
                        
                        <div class="mb-3" id="statusUpdateSection">
                            <label class="form-label">Update Status:</label>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-success" onclick="updateAttendanceStatus('Present')">
                                    <i class="fas fa-check"></i> Mark Present
                                </button>
                                <button type="button" class="btn btn-danger" onclick="updateAttendanceStatus('Absent')">
                                    <i class="fas fa-times"></i> Mark Absent
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Select Date:</label>
                    <div id="calendarContainer">
                        <div class="text-center text-muted">
                            <i class="fas fa-calendar-alt fa-3x mb-3"></i>
                            <p>Please select an employee to view calendar</p>
                        </div>
                    </div>
                </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
.calendar {
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
}

.calendar-header {
    background: #007bff;
    color: white;
    padding: 10px;
    text-align: center;
    position: relative;
}

.calendar-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255,255,255,0.2);
    border: none;
    color: white;
    padding: 5px 10px;
    border-radius: 3px;
    cursor: pointer;
}

.calendar-nav.prev { left: 10px; }
.calendar-nav.next { right: 10px; }

.calendar-title {
    font-size: 16px;
    font-weight: bold;
    margin: 0;
}

.calendar-weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background: #f8f9fa;
    border-bottom: 1px solid #ddd;
}

.calendar-weekday {
    padding: 8px 4px;
    text-align: center;
    font-weight: bold;
    color: #495057;
    font-size: 12px;
}

.calendar-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
}

.calendar-day {
    padding: 10px 4px;
    text-align: center;
    border-right: 1px solid #eee;
    border-bottom: 1px solid #eee;
    cursor: pointer;
    font-size: 14px;
    min-height: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: all 0.2s ease;
}

.calendar-day:hover {
    background: #e3f2fd;
}

.calendar-day.other-month {
    color: #ccc;
    background: #fafafa;
}

.calendar-day.today {
    background: #fff3cd;
    font-weight: bold;
    border: 2px solid #ffc107;
}

.calendar-day.selected {
    background: #007bff;
    color: white;
    font-weight: bold;
}

.calendar-day.future {
    opacity: 0.5;
    cursor: not-allowed;
    background: #f5f5f5;
}

.calendar-day.future:hover {
    background: #f5f5f5;
}

.day-number {
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 2px;
}

.attendance-status {
    font-size: 10px;
    padding: 3px 6px;
    border-radius: 12px;
    font-weight: bold;
    text-transform: uppercase;
    margin-top: 3px;
    min-width: 25px;
    display: inline-block;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.status-present {
    background: #28a745;
    color: white;
    border: 1px solid #1e7e34;
}

.status-absent {
    background: #dc3545;
    color: white;
    border: 1px solid #c82333;
}

.status-future {
    background: #ffc107;
    color: #212529;
    border: 1px solid #e0a800;
}

.status-unmarked {
    background: #6c757d;
    color: white;
    border: 1px solid #545b62;
    opacity: 0.7;
}
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            let currentDate = new Date();
            let selectedDate = new Date();
            let selectedEmployeeId = null;
            
            renderCalendar();
            
            $('#calendarEmployeeSelect').change(function() {
                selectedEmployeeId = $(this).val();
                if (selectedEmployeeId) {
                    renderCalendar();
                    updateSelectedDateDisplay();
                    checkCurrentStatus();
                } else {
                    $('#calendarContainer').html(`
                        <div class="text-center text-muted">
                            <i class="fas fa-calendar-alt fa-3x mb-3"></i>
                            <p>Please select an employee to view calendar</p>
                        </div>
                    `);
                    $('#currentStatusText').text('Not marked');
                    $('#selectedDateText').text('No date selected');
                    $('#statusUpdateSection').hide();
                }
            });
            
            function renderCalendar() {
                if (!selectedEmployeeId) {
                    $('#calendarContainer').html(`
                        <div class="text-center text-muted">
                            <i class="fas fa-calendar-alt fa-3x mb-3"></i>
                            <p>Please select an employee to view calendar</p>
                        </div>
                    `);
                    return;
                }
                
                const currentYear = currentDate.getFullYear();
                const currentMonth = currentDate.getMonth();
                
                const firstDay = new Date(currentYear, currentMonth, 1);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                const today = new Date();
                
                let calendarHTML = `
                    <div class="calendar">
                        <div class="calendar-header">
                            <button class="calendar-nav prev" onclick="changeMonth(-1)">&lt;</button>
                            <h3 class="calendar-title">${getMonthName(currentMonth)} ${currentYear}</h3>
                            <button class="calendar-nav next" onclick="changeMonth(1)">&gt;</button>
                        </div>
                        <div class="calendar-weekdays">
                            <div class="calendar-weekday">Sun</div>
                            <div class="calendar-weekday">Mon</div>
                            <div class="calendar-weekday">Tue</div>
                            <div class="calendar-weekday">Wed</div>
                            <div class="calendar-weekday">Thu</div>
                            <div class="calendar-weekday">Fri</div>
                            <div class="calendar-weekday">Sat</div>
                        </div>
                        <div class="calendar-days">
                `;
                
                for (let i = 0; i < 42; i++) {
                    const currentDay = new Date(startDate.getTime()); 
                    currentDay.setDate(currentDay.getDate() + i);
                    
                    const dayNumber = currentDay.getDate();
                    const isOtherMonth = currentDay.getMonth() !== currentMonth;
                    const isToday = currentDay.toDateString() === today.toDateString();
                    const isFuture = currentDay > today;
                    const isSelected = currentDay.toDateString() === selectedDate.toDateString();
                    
                    let dayClass = 'calendar-day';
                    if (isOtherMonth) dayClass += ' other-month';
                    if (isToday) dayClass += ' today';
                    if (isSelected) dayClass += ' selected';
                    if (isFuture) dayClass += ' future';
                    
                    // Create date string in local time to avoid timezone issues
                    const dayYear = currentDay.getFullYear();
                    const monthStr = String(currentDay.getMonth() + 1).padStart(2, '0');
                    const dayStr = String(currentDay.getDate()).padStart(2, '0');
                    const dateString = `${dayYear}-${monthStr}-${dayStr}`;
                    
                    if (isFuture) {
                        calendarHTML += `
                            <div class="${dayClass}" data-date="${dateString}">
                                <div class="day-number">${dayNumber}</div>
                                <div class="attendance-status status-future">Future</div>
                            </div>
                        `;
                    } else {
                        calendarHTML += `
                            <div class="${dayClass}" data-date="${dateString}" onclick="selectDate('${dateString}')">
                                <div class="day-number">${dayNumber}</div>
                                <div class="attendance-status status-unmarked"></div>
                            </div>
                        `;
                    }
                }
                
                calendarHTML += `
                        </div>
                    </div>
                `;
                
                $('#calendarContainer').html(calendarHTML);
            }
            
            function getMonthName(month) {
                const months = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                return months[month];
            }
            
            window.changeMonth = function(delta) {
                currentDate.setMonth(currentDate.getMonth() + delta);
                renderCalendar();
            };
            
            window.selectDate = function(dateString) {
                const [year, month, day] = dateString.split('-').map(Number);
                const selectedDateObj = new Date(year, month - 1, day); 
                const today = new Date();
                
                if (selectedDateObj > today) {
                    return;
                }
                
                selectedDate = selectedDateObj;
                
                $('.calendar-day').removeClass('selected');
                $(`.calendar-day[data-date="${dateString}"]`).addClass('selected');
                
                updateSelectedDateDisplay();
                checkCurrentStatus();
            };
            
            function updateSelectedDateDisplay() {
                if (!selectedEmployeeId) {
                    $('#selectedDateText').text('No date selected');
                    return;
                }
                
                const dateString = selectedDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                $('#selectedDateText').text(dateString);
            }
            
            function checkCurrentStatus() {
                if (!selectedEmployeeId) {
                    $('#currentStatusText').text('Not marked');
                    $('#statusUpdateSection').hide();
                    return;
                }
                
                // Create date string in local time to match calendar format
                const year = selectedDate.getFullYear();
                const month = String(selectedDate.getMonth() + 1).padStart(2, '0');
                const day = String(selectedDate.getDate()).padStart(2, '0');
                const selectedDateString = `${year}-${month}-${day}`;
                
                // Make AJAX call to check current status
                $.ajax({
                    url: '/Attendance/GetAttendanceStatus',
                    type: 'GET',
                    data: {
                        employeeId: selectedEmployeeId,
                        date: selectedDateString
                    },
                    success: function(response) {
                        const status = response.status || 'Not marked';
                        $('#currentStatusText').text(status);
                        
                        // Show/hide status update section based on whether attendance is marked
                        if (status === 'Not marked') {
                            $('#statusUpdateSection').show();
                        } else {
                            $('#statusUpdateSection').hide();
                        }
                    },
                    error: function() {
                        $('#currentStatusText').text('Not marked');
                        $('#statusUpdateSection').show();
                    }
                });
            }
            
            window.updateAttendanceStatus = function(status) {
                if (!selectedEmployeeId) {
                    showAlert('Please select an employee first.', 'warning');
                    return;
                }
                
                // Create date string in local time to match calendar format
                const year = selectedDate.getFullYear();
                const month = String(selectedDate.getMonth() + 1).padStart(2, '0');
                const day = String(selectedDate.getDate()).padStart(2, '0');
                const selectedDateString = `${year}-${month}-${day}`;
                const today = new Date();
                
                if (selectedDate > today) {
                    showAlert('Cannot mark attendance for future dates.', 'warning');
                    return;
                }
                
                $.ajax({
                    url: '/Attendance/QuickUpdate',
                    type: 'POST',
                    data: {
                        employeeId: selectedEmployeeId,
                        date: selectedDateString,
                        status: status
                    },
                    success: function(response) {
                        if (response.success) {
                            showAlert(`Attendance marked as ${status} successfully!`, 'success');
                            
                            // Refresh current status display
                            checkCurrentStatus();
                            
                            // Refresh main table if needed
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showAlert(response.message || 'Failed to update attendance.', 'danger');
                        }
                    },
                    error: function(xhr, status, error) {
                        showAlert('An error occurred while updating attendance.', 'danger');
                    }
                });
            };

            // Edit Status Button Click
            $(document).on('click', '.edit-status-btn', function() {
                const row = $(this).closest('tr');
                const statusCell = row.find('.status-cell');
                
                statusCell.find('.status-badge').hide();
                statusCell.find('.status-dropdown').show();
                statusCell.find('.edit-status-btn').hide();
                statusCell.find('.save-status-btn').show();
                statusCell.find('.cancel-status-btn').show();
            });

            // Cancel Status Button Click
            $(document).on('click', '.cancel-status-btn', function() {
                const row = $(this).closest('tr');
                const statusCell = row.find('.status-cell');
                const originalStatus = statusCell.find('.status-badge').text().trim();
                
                statusCell.find('.status-dropdown').val(originalStatus);
                statusCell.find('.status-badge').show();
                statusCell.find('.status-dropdown').hide();
                statusCell.find('.edit-status-btn').show();
                statusCell.find('.save-status-btn').hide().prop('disabled', false).text('Save');
                statusCell.find('.cancel-status-btn').hide();
                $('#statusUpdateAlert').hide();
            });

            // Save Status Button Click
            $(document).on('click', '.save-status-btn', function() {
                const row = $(this).closest('tr');
                const statusCell = row.find('.status-cell');
                const attendanceId = row.data('attendance-id');
                const newStatus = statusCell.find('.status-dropdown').val();
                const originalStatus = statusCell.find('.status-badge').text().trim();
                
                if (newStatus === originalStatus) {
                    showAlert('No changes detected. The attendance status is already set to the same value.', 'warning');
                    return;
                }

                const saveBtn = statusCell.find('.save-status-btn');
                saveBtn.prop('disabled', true).text('Saving...');

                $.ajax({
                    url: '/Attendance/UpdateStatus',
                    type: 'POST',
                    data: {
                        id: attendanceId,
                        status: newStatus
                    },
                    success: function(response) {
                        if (response.success) {
                            const statusBadge = statusCell.find('.status-badge');
                            statusBadge.text(newStatus);
                            statusBadge.removeClass('bg-success bg-danger');
                            statusBadge.addClass(newStatus === 'Present' ? 'bg-success' : 'bg-danger');
                            
                            showAlert('Attendance status updated successfully!', 'success');
                            
                            statusCell.find('.status-badge').show();
                            statusCell.find('.status-dropdown').hide();
                            statusCell.find('.edit-status-btn').show();
                            statusCell.find('.save-status-btn').hide().prop('disabled', false).text('Save');
                            statusCell.find('.cancel-status-btn').hide();
                        } else {
                            showAlert(response.message || 'Failed to update status.', 'danger');
                            saveBtn.prop('disabled', false).text('Save');
                        }
                    },
                    error: function(xhr, status, error) {
                        showAlert('An error occurred while updating the status.', 'danger');
                        saveBtn.prop('disabled', false).text('Save');
                    }
                });
            });

            function showAlert(message, type) {
                $('#statusUpdateMessage').text(message);
                $('#statusUpdateAlert')
                    .removeClass('alert-success alert-danger alert-warning alert-info')
                    .addClass(`alert-${type}`)
                    .show();
                
                setTimeout(function() {
                    $('#statusUpdateAlert').fadeOut();
                }, 3000);
            }

            // Live Search and Filtering Functionality
            setTimeout(function() {
                const $searchInput = $('#liveSearch');
                const $clearLiveFiltersBtn = $('#clearLiveFilters');
                let searchTimeout;

                function performSearch() {
                    const searchTerm = $searchInput.val().trim();
                    
                    // Get current filter values
                    const deptId = $('select[name="deptId"]').val();
                    const empId = $('select[name="empId"]').val();
                    const fromDate = $('input[name="from"]').val();
                    const toDate = $('input[name="to"]').val();
                    
                    $.ajax({
                        url: '/Attendance/Search',
                        type: 'GET',
                        data: { 
                            searchTerm: searchTerm,
                            deptId: deptId,
                            empId: empId,
                            from: fromDate,
                            to: toDate
                        },
                        success: function(data) {
                            $('#attendanceTable tbody').html(data);
                            
                            // Re-attach delete event handlers to new rows
                            $('.delete-attendance').click(function() {
                                var $row = $(this).closest('tr');
                                var id = $(this).data('id');
                                if (confirm('Are you sure you want to delete this attendance record?')) {
                                    $.ajax({
                                        url: '/Attendance/Delete/' + id,
                                        type: 'POST',
                                        headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                                        success: function() {
                                            $row.fadeOut(400, function() { $(this).remove(); });
                                            showNotification('Attendance record deleted successfully!', 'success');
                                            setTimeout(function() { location.reload(); }, 1000);
                                        },
                                        error: function() {
                                            showNotification('Error deleting attendance record.', 'danger');
                                        }
                                    });
                                }
                            });
                            
                            // Note: Status editing functionality uses $(document).on() 
                            // so it automatically works with dynamically added content
                        },
                        error: function() {
                            showNotification('Error performing search.', 'danger');
                        }
                    });
                }

                $searchInput.on('input', function() {
                    // Clear previous timeout
                    clearTimeout(searchTimeout);
                    
                    // Set new timeout for search (debounce)
                    searchTimeout = setTimeout(function() {
                        performSearch();
                    }, 300);
                });

                $clearLiveFiltersBtn.on('click', function() {
                    $searchInput.val('');
                    performSearch();
                });

                // Handle pagination changes - reload the page to reset search
                $(document).on('click', '.pagination .page-link', function() {
                    if ($searchInput.val().trim() !== '') {
                        $searchInput.val('');
                    }
                });
            }, 100);

            function showNotification(message, type) {
                $('#ajaxNotification').remove();
                var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                var notification = $(`<div id="ajaxNotification" class="alert ${alertClass} alert-dismissible fade show" role="alert" style="position: fixed; top: 20px; right: 20px; z-index: 9999;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>`);
                $('body').append(notification);
                setTimeout(function() { notification.alert('close'); }, 3000);
            }

            $('.delete-attendance').click(function() {
                var $row = $(this).closest('tr');
                var id = $(this).data('id');
                if (confirm('Are you sure you want to delete this attendance record?')) {
                    $.ajax({
                        url: '/Attendance/Delete/' + id,
                        type: 'POST',
                        headers: { 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() },
                        success: function() {
                            $row.fadeOut(400, function() { $(this).remove(); });
                            showNotification('Attendance record deleted successfully!', 'success');
                            setTimeout(function() { location.reload(); }, 1000);
                        },
                        error: function() {
                            showNotification('Error deleting attendance record.', 'danger');
                        }
                    });
                }
            });
        });
    </script>
} 